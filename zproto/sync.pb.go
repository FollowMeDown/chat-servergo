// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// /////////////////////////////////////////////////////////////////////
// ServerAuthReq ==> VoidRsp
// SERVER_AUTH_REQ
type ServerAuthReq struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (m *ServerAuthReq) Reset()                    { *m = ServerAuthReq{} }
func (m *ServerAuthReq) String() string            { return proto.CompactTextString(m) }
func (*ServerAuthReq) ProtoMessage()               {}
func (*ServerAuthReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ServerAuthReq) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServerAuthReq) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type VoidRsp struct {
}

func (m *VoidRsp) Reset()                    { *m = VoidRsp{} }
func (m *VoidRsp) String() string            { return proto.CompactTextString(m) }
func (*VoidRsp) ProtoMessage()               {}
func (*VoidRsp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

//
type DeliveryUpdatesToUsers struct {
	MyAuthKeyId       int64   `protobuf:"varint,1,opt,name=my_auth_key_id,json=myAuthKeyId" json:"my_auth_key_id,omitempty"`
	MySessionId       int64   `protobuf:"varint,2,opt,name=my_session_id,json=mySessionId" json:"my_session_id,omitempty"`
	MyNetlibSessionId int64   `protobuf:"varint,3,opt,name=my_netlib_session_id,json=myNetlibSessionId" json:"my_netlib_session_id,omitempty"`
	SendtoUserIdList  []int32 `protobuf:"varint,4,rep,packed,name=sendto_user_id_list,json=sendtoUserIdList" json:"sendto_user_id_list,omitempty"`
	// uint32 raw_data_header = 4;
	RawData []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *DeliveryUpdatesToUsers) Reset()                    { *m = DeliveryUpdatesToUsers{} }
func (m *DeliveryUpdatesToUsers) String() string            { return proto.CompactTextString(m) }
func (*DeliveryUpdatesToUsers) ProtoMessage()               {}
func (*DeliveryUpdatesToUsers) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *DeliveryUpdatesToUsers) GetMyAuthKeyId() int64 {
	if m != nil {
		return m.MyAuthKeyId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetMySessionId() int64 {
	if m != nil {
		return m.MySessionId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetMyNetlibSessionId() int64 {
	if m != nil {
		return m.MyNetlibSessionId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetSendtoUserIdList() []int32 {
	if m != nil {
		return m.SendtoUserIdList
	}
	return nil
}

func (m *DeliveryUpdatesToUsers) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type PushUpdatesData struct {
	AuthKeyId       int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	SessionId       int64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	NetlibSessionId int64  `protobuf:"varint,3,opt,name=netlib_session_id,json=netlibSessionId" json:"netlib_session_id,omitempty"`
	RawDataHeader   uint32 `protobuf:"varint,4,opt,name=raw_data_header,json=rawDataHeader" json:"raw_data_header,omitempty"`
	RawData         []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *PushUpdatesData) Reset()                    { *m = PushUpdatesData{} }
func (m *PushUpdatesData) String() string            { return proto.CompactTextString(m) }
func (*PushUpdatesData) ProtoMessage()               {}
func (*PushUpdatesData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *PushUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushUpdatesData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushUpdatesData) GetNetlibSessionId() int64 {
	if m != nil {
		return m.NetlibSessionId
	}
	return 0
}

func (m *PushUpdatesData) GetRawDataHeader() uint32 {
	if m != nil {
		return m.RawDataHeader
	}
	return 0
}

func (m *PushUpdatesData) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerAuthReq)(nil), "zproto.ServerAuthReq")
	proto.RegisterType((*VoidRsp)(nil), "zproto.VoidRsp")
	proto.RegisterType((*DeliveryUpdatesToUsers)(nil), "zproto.DeliveryUpdatesToUsers")
	proto.RegisterType((*PushUpdatesData)(nil), "zproto.PushUpdatesData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCSync service

type RPCSyncClient interface {
	// frontend --> sync
	PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error)
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error)
}

type rPCSyncClient struct {
	cc *grpc.ClientConn
}

func NewRPCSyncClient(cc *grpc.ClientConn) RPCSyncClient {
	return &rPCSyncClient{cc}
}

func (c *rPCSyncClient) PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCSync_serviceDesc.Streams[0], c.cc, "/zproto.RPCSync/PushUpdatesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSyncPushUpdatesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCSync_PushUpdatesStreamClient interface {
	Recv() (*PushUpdatesData, error)
	grpc.ClientStream
}

type rPCSyncPushUpdatesStreamClient struct {
	grpc.ClientStream
}

func (x *rPCSyncPushUpdatesStreamClient) Recv() (*PushUpdatesData, error) {
	m := new(PushUpdatesData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCSyncClient) DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCSync service

type RPCSyncServer interface {
	// frontend --> sync
	PushUpdatesStream(*ServerAuthReq, RPCSync_PushUpdatesStreamServer) error
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(context.Context, *DeliveryUpdatesToUsers) (*VoidRsp, error)
}

func RegisterRPCSyncServer(s *grpc.Server, srv RPCSyncServer) {
	s.RegisterService(&_RPCSync_serviceDesc, srv)
}

func _RPCSync_PushUpdatesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerAuthReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCSyncServer).PushUpdatesStream(m, &rPCSyncPushUpdatesStreamServer{stream})
}

type RPCSync_PushUpdatesStreamServer interface {
	Send(*PushUpdatesData) error
	grpc.ServerStream
}

type rPCSyncPushUpdatesStreamServer struct {
	grpc.ServerStream
}

func (x *rPCSyncPushUpdatesStreamServer) Send(m *PushUpdatesData) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCSync_DeliveryUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryUpdatesToUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, req.(*DeliveryUpdatesToUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zproto.RPCSync",
	HandlerType: (*RPCSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliveryUpdates",
			Handler:    _RPCSync_DeliveryUpdates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushUpdatesStream",
			Handler:       _RPCSync_PushUpdatesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sync.proto",
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0xe5, 0x76, 0x5d, 0x97, 0xaf, 0x94, 0x50, 0x8f, 0x3f, 0x61, 0x88, 0x11, 0x05, 0x81,
	0x22, 0x24, 0x0a, 0x82, 0x27, 0xa0, 0x0c, 0x69, 0x15, 0x30, 0x55, 0x2e, 0xe3, 0x82, 0x1b, 0xcb,
	0xad, 0x3f, 0xa9, 0x11, 0xb5, 0x53, 0x6c, 0x67, 0x93, 0x79, 0x0e, 0xde, 0x87, 0x17, 0xe1, 0x61,
	0x50, 0xfe, 0x8d, 0xd1, 0xc1, 0xae, 0x3e, 0xe9, 0x9c, 0x13, 0xe5, 0xfc, 0xe4, 0x03, 0x60, 0xbd,
	0x5e, 0x8e, 0x37, 0x26, 0x77, 0x39, 0xdd, 0xfd, 0x5e, 0xdd, 0xe4, 0x23, 0x0c, 0xe7, 0x68, 0xce,
	0xd0, 0xbc, 0x29, 0xdc, 0x8a, 0xe1, 0x37, 0xfa, 0x00, 0x02, 0x5b, 0x09, 0x3c, 0x93, 0x11, 0x89,
	0x49, 0xda, 0x63, 0x7b, 0xb5, 0x30, 0x95, 0xf4, 0x11, 0x0c, 0x1a, 0x53, 0x0b, 0x85, 0x51, 0x27,
	0x26, 0x69, 0xc0, 0xa0, 0x96, 0x4e, 0x84, 0xc2, 0x24, 0x80, 0xfe, 0xe7, 0x3c, 0x93, 0xcc, 0x6e,
	0x92, 0x5f, 0x04, 0xee, 0x1e, 0xe1, 0x3a, 0x3b, 0x43, 0xe3, 0x4f, 0x37, 0x52, 0x38, 0xb4, 0x9f,
	0xf2, 0x53, 0x8b, 0xc6, 0xd2, 0xc7, 0x70, 0x53, 0x79, 0x2e, 0x0a, 0xb7, 0xe2, 0x5f, 0xd1, 0xb7,
	0x3f, 0xea, 0xb2, 0x81, 0xf2, 0x65, 0x8d, 0xf7, 0xe8, 0xa7, 0x92, 0x26, 0x30, 0x54, 0x9e, 0x5b,
	0xb4, 0x36, 0xcb, 0x75, 0x99, 0xe9, 0xb4, 0x99, 0x79, 0xad, 0x4d, 0x25, 0x7d, 0x01, 0xb7, 0x95,
	0xe7, 0x1a, 0xdd, 0x3a, 0x5b, 0x5c, 0x8e, 0x76, 0xab, 0xe8, 0x48, 0xf9, 0x93, 0xca, 0xfa, 0xf3,
	0xc1, 0x73, 0xd8, 0xb7, 0xa8, 0xa5, 0xcb, 0x79, 0x61, 0x2b, 0x44, 0xbe, 0xce, 0xac, 0x8b, 0x76,
	0xe2, 0x6e, 0xda, 0x63, 0xb7, 0x6a, 0xab, 0xec, 0x38, 0x95, 0x1f, 0x32, 0xeb, 0xe8, 0x7d, 0xd8,
	0x33, 0xe2, 0x9c, 0x4b, 0xe1, 0x44, 0xd4, 0x8b, 0x49, 0x7a, 0x83, 0xf5, 0x8d, 0x38, 0x3f, 0x12,
	0x4e, 0x24, 0x3f, 0x09, 0x84, 0xb3, 0xc2, 0xae, 0x1a, 0xb4, 0x52, 0xa3, 0x87, 0x30, 0xb8, 0x0a,
	0x15, 0x88, 0x0b, 0xa4, 0x87, 0x00, 0x57, 0x78, 0x02, 0x7b, 0x51, 0xee, 0x19, 0x8c, 0xfe, 0x87,
	0x12, 0xea, 0x2d, 0x90, 0xa7, 0x10, 0xb6, 0xcd, 0xf8, 0x0a, 0x85, 0x44, 0x13, 0xed, 0xc4, 0x24,
	0x1d, 0xb2, 0x61, 0x53, 0xf0, 0xb8, 0x12, 0xaf, 0x21, 0x78, 0xf5, 0x83, 0x40, 0x9f, 0xcd, 0xde,
	0xce, 0xbd, 0x5e, 0xd2, 0x77, 0x30, 0xba, 0x04, 0x33, 0x77, 0x06, 0x85, 0xa2, 0x77, 0xc6, 0xf5,
	0x48, 0xc6, 0x7f, 0x2d, 0xe4, 0xe0, 0x5e, 0x2b, 0x6f, 0xe1, 0xbf, 0x24, 0x74, 0x02, 0xe1, 0xd6,
	0x93, 0xd3, 0xc3, 0x36, 0xfd, 0xef, 0x2d, 0x1c, 0x84, 0xad, 0xdf, 0xec, 0x66, 0xf2, 0x04, 0xf6,
	0x97, 0xb9, 0x1a, 0x6b, 0x5c, 0x14, 0x6b, 0x91, 0xa9, 0xc6, 0x9e, 0xc0, 0x97, 0x59, 0x79, 0xcb,
	0xb6, 0xc7, 0x9d, 0x19, 0x59, 0xec, 0x56, 0xf2, 0xeb, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed,
	0xa9, 0xdc, 0x4e, 0xd5, 0x02, 0x00, 0x00,
}
