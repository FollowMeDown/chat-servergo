// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sync.proto

/*
Package zproto is a generated protocol buffer package.

It is generated from these files:
	sync.proto

It has these top-level messages:
	ServerAuthReq
	VoidRsp
	DeliveryUpdatesToUsers
	PushUpdatesData
*/
package zproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// /////////////////////////////////////////////////////////////////////
// ServerAuthReq ==> VoidRsp
// SERVER_AUTH_REQ
type ServerAuthReq struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (m *ServerAuthReq) Reset()                    { *m = ServerAuthReq{} }
func (m *ServerAuthReq) String() string            { return proto.CompactTextString(m) }
func (*ServerAuthReq) ProtoMessage()               {}
func (*ServerAuthReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerAuthReq) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServerAuthReq) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type VoidRsp struct {
}

func (m *VoidRsp) Reset()                    { *m = VoidRsp{} }
func (m *VoidRsp) String() string            { return proto.CompactTextString(m) }
func (*VoidRsp) ProtoMessage()               {}
func (*VoidRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

//
type DeliveryUpdatesToUsers struct {
	MyAuthKeyId      int64   `protobuf:"varint,1,opt,name=my_auth_key_id,json=myAuthKeyId" json:"my_auth_key_id,omitempty"`
	MySessionId      int64   `protobuf:"varint,2,opt,name=my_session_id,json=mySessionId" json:"my_session_id,omitempty"`
	SendtoUserIdList []int32 `protobuf:"varint,3,rep,packed,name=sendto_user_id_list,json=sendtoUserIdList" json:"sendto_user_id_list,omitempty"`
	RawDataHeader    uint32  `protobuf:"varint,4,opt,name=raw_data_header,json=rawDataHeader" json:"raw_data_header,omitempty"`
	RawData          []byte  `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *DeliveryUpdatesToUsers) Reset()                    { *m = DeliveryUpdatesToUsers{} }
func (m *DeliveryUpdatesToUsers) String() string            { return proto.CompactTextString(m) }
func (*DeliveryUpdatesToUsers) ProtoMessage()               {}
func (*DeliveryUpdatesToUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeliveryUpdatesToUsers) GetMyAuthKeyId() int64 {
	if m != nil {
		return m.MyAuthKeyId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetMySessionId() int64 {
	if m != nil {
		return m.MySessionId
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetSendtoUserIdList() []int32 {
	if m != nil {
		return m.SendtoUserIdList
	}
	return nil
}

func (m *DeliveryUpdatesToUsers) GetRawDataHeader() uint32 {
	if m != nil {
		return m.RawDataHeader
	}
	return 0
}

func (m *DeliveryUpdatesToUsers) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type PushUpdatesData struct {
	AuthKeyId       int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId" json:"auth_key_id,omitempty"`
	SessionId       int64  `protobuf:"varint,2,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	NetlibSessionId int64  `protobuf:"varint,3,opt,name=netlib_session_id,json=netlibSessionId" json:"netlib_session_id,omitempty"`
	RawDataHeader   uint32 `protobuf:"varint,4,opt,name=raw_data_header,json=rawDataHeader" json:"raw_data_header,omitempty"`
	RawData         []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *PushUpdatesData) Reset()                    { *m = PushUpdatesData{} }
func (m *PushUpdatesData) String() string            { return proto.CompactTextString(m) }
func (*PushUpdatesData) ProtoMessage()               {}
func (*PushUpdatesData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PushUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushUpdatesData) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *PushUpdatesData) GetNetlibSessionId() int64 {
	if m != nil {
		return m.NetlibSessionId
	}
	return 0
}

func (m *PushUpdatesData) GetRawDataHeader() uint32 {
	if m != nil {
		return m.RawDataHeader
	}
	return 0
}

func (m *PushUpdatesData) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

func init() {
	proto.RegisterType((*ServerAuthReq)(nil), "zproto.ServerAuthReq")
	proto.RegisterType((*VoidRsp)(nil), "zproto.VoidRsp")
	proto.RegisterType((*DeliveryUpdatesToUsers)(nil), "zproto.DeliveryUpdatesToUsers")
	proto.RegisterType((*PushUpdatesData)(nil), "zproto.PushUpdatesData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCSync service

type RPCSyncClient interface {
	// frontend --> sync
	PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error)
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error)
}

type rPCSyncClient struct {
	cc *grpc.ClientConn
}

func NewRPCSyncClient(cc *grpc.ClientConn) RPCSyncClient {
	return &rPCSyncClient{cc}
}

func (c *rPCSyncClient) PushUpdatesStream(ctx context.Context, in *ServerAuthReq, opts ...grpc.CallOption) (RPCSync_PushUpdatesStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCSync_serviceDesc.Streams[0], c.cc, "/zproto.RPCSync/PushUpdatesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSyncPushUpdatesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCSync_PushUpdatesStreamClient interface {
	Recv() (*PushUpdatesData, error)
	grpc.ClientStream
}

type rPCSyncPushUpdatesStreamClient struct {
	grpc.ClientStream
}

func (x *rPCSyncPushUpdatesStreamClient) Recv() (*PushUpdatesData, error) {
	m := new(PushUpdatesData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCSyncClient) DeliveryUpdates(ctx context.Context, in *DeliveryUpdatesToUsers, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := grpc.Invoke(ctx, "/zproto.RPCSync/DeliveryUpdates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCSync service

type RPCSyncServer interface {
	// frontend --> sync
	PushUpdatesStream(*ServerAuthReq, RPCSync_PushUpdatesStreamServer) error
	// rpc ServerAuth(ServerAuthReq) returns (VoidRsp);
	DeliveryUpdates(context.Context, *DeliveryUpdatesToUsers) (*VoidRsp, error)
}

func RegisterRPCSyncServer(s *grpc.Server, srv RPCSyncServer) {
	s.RegisterService(&_RPCSync_serviceDesc, srv)
}

func _RPCSync_PushUpdatesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerAuthReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCSyncServer).PushUpdatesStream(m, &rPCSyncPushUpdatesStreamServer{stream})
}

type RPCSync_PushUpdatesStreamServer interface {
	Send(*PushUpdatesData) error
	grpc.ServerStream
}

type rPCSyncPushUpdatesStreamServer struct {
	grpc.ServerStream
}

func (x *rPCSyncPushUpdatesStreamServer) Send(m *PushUpdatesData) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCSync_DeliveryUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryUpdatesToUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zproto.RPCSync/DeliveryUpdates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).DeliveryUpdates(ctx, req.(*DeliveryUpdatesToUsers))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zproto.RPCSync",
	HandlerType: (*RPCSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliveryUpdates",
			Handler:    _RPCSync_DeliveryUpdates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushUpdatesStream",
			Handler:       _RPCSync_PushUpdatesStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sync.proto",
}

func init() { proto.RegisterFile("sync.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xc7, 0x99, 0xc4, 0x34, 0xdd, 0x13, 0xd7, 0xb5, 0x23, 0xda, 0xb5, 0x62, 0x5d, 0x56, 0x90,
	0xa5, 0xe0, 0x22, 0xfa, 0x04, 0xc6, 0x0a, 0x0d, 0x7e, 0x10, 0x26, 0xd6, 0x0b, 0x6f, 0x96, 0x69,
	0xe6, 0xe0, 0x2e, 0x66, 0x67, 0xe3, 0x9c, 0x49, 0xcb, 0xf4, 0x39, 0x7c, 0x1f, 0x1f, 0xc2, 0x17,
	0x92, 0xfd, 0xaa, 0xb5, 0xf1, 0xce, 0xab, 0x81, 0xdf, 0xf9, 0xc3, 0x39, 0x3f, 0xe6, 0x0f, 0x40,
	0x4e, 0x2f, 0xd3, 0xb5, 0xa9, 0x6c, 0xc5, 0x77, 0x2e, 0x9b, 0x37, 0xfe, 0x00, 0xfe, 0x02, 0xcd,
	0x39, 0x9a, 0xd7, 0x1b, 0x9b, 0x0b, 0xfc, 0xce, 0x1f, 0x81, 0x47, 0x0d, 0xc8, 0x0a, 0x15, 0xb2,
	0x88, 0x25, 0x23, 0xb1, 0xdb, 0x82, 0x99, 0xe2, 0x4f, 0x60, 0xd2, 0x0d, 0xb5, 0x2c, 0x31, 0x1c,
	0x44, 0x2c, 0xf1, 0x04, 0xb4, 0xe8, 0xa3, 0x2c, 0x31, 0xf6, 0x60, 0xfc, 0xb9, 0x2a, 0x94, 0xa0,
	0x75, 0xfc, 0x8b, 0xc1, 0x83, 0x63, 0x5c, 0x15, 0xe7, 0x68, 0xdc, 0xe9, 0x5a, 0x49, 0x8b, 0xf4,
	0xa9, 0x3a, 0x25, 0x34, 0xc4, 0x9f, 0xc2, 0x9d, 0xd2, 0x65, 0x72, 0x63, 0xf3, 0xec, 0x1b, 0xba,
	0x7e, 0xd1, 0x50, 0x4c, 0x4a, 0x57, 0x9f, 0xf1, 0x0e, 0xdd, 0x4c, 0xf1, 0x18, 0xfc, 0xd2, 0x65,
	0x84, 0x44, 0x45, 0xa5, 0xeb, 0xcc, 0xa0, 0xcf, 0x2c, 0x5a, 0x36, 0x53, 0xfc, 0x39, 0xdc, 0x23,
	0xd4, 0xca, 0x56, 0xd9, 0x86, 0x9a, 0x8b, 0xb3, 0x55, 0x41, 0x36, 0x1c, 0x46, 0xc3, 0x64, 0x24,
	0xee, 0xb6, 0xa3, 0x7a, 0xe5, 0x4c, 0xbd, 0x2f, 0xc8, 0xf2, 0x67, 0x10, 0x18, 0x79, 0x91, 0x29,
	0x69, 0x65, 0x96, 0xa3, 0x54, 0x68, 0xc2, 0x5b, 0x11, 0x4b, 0x7c, 0xe1, 0x1b, 0x79, 0x71, 0x2c,
	0xad, 0x3c, 0x69, 0x20, 0x7f, 0x08, 0xbb, 0x7d, 0x2e, 0x1c, 0x45, 0x2c, 0xb9, 0x2d, 0xc6, 0x5d,
	0x20, 0xfe, 0xc9, 0x20, 0x98, 0x6f, 0x28, 0xef, 0x8c, 0x6a, 0xc6, 0x0f, 0x61, 0xb2, 0xed, 0xe2,
	0xc9, 0x2b, 0x93, 0xc7, 0x00, 0x5b, 0x1a, 0x1e, 0x5d, 0x49, 0x1c, 0xc1, 0x9e, 0x46, 0xbb, 0x2a,
	0xce, 0xae, 0xcb, 0x0e, 0x9b, 0x54, 0xd0, 0x0e, 0xfe, 0x08, 0xff, 0xbf, 0xc1, 0xcb, 0x1f, 0x0c,
	0xc6, 0x62, 0xfe, 0x66, 0xe1, 0xf4, 0x92, 0xbf, 0x85, 0xbd, 0x6b, 0x32, 0x0b, 0x6b, 0x50, 0x96,
	0xfc, 0x7e, 0xda, 0x76, 0x23, 0xfd, 0xab, 0x18, 0x07, 0xfb, 0x3d, 0xbe, 0xa1, 0xff, 0x82, 0xf1,
	0x29, 0x04, 0x37, 0x7e, 0x9a, 0x1f, 0xf6, 0xe9, 0x7f, 0x57, 0xe0, 0x20, 0xe8, 0xe7, 0x5d, 0x5d,
	0xa6, 0x47, 0xb0, 0xbf, 0xac, 0xca, 0xf4, 0x72, 0x99, 0x4b, 0x9b, 0xa2, 0xfe, 0x5a, 0x68, 0xec,
	0x22, 0x53, 0xff, 0xcb, 0xbc, 0x7e, 0xdb, 0x73, 0xe8, 0x64, 0x70, 0xb6, 0xd3, 0xf0, 0x57, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x1b, 0x04, 0x52, 0xd1, 0x02, 0x00, 0x00,
}
